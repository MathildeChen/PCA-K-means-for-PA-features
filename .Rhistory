table(wei_mort$e_19ac)
# > Descriptive table of the (non-standardized) variables
wei_mort <- mort %>%
right_join(data_named$wei, by = "stno")
table(wei_mort$e_19ac)
# > Mean & sd for each feature, by mortality status
desc.tab.mort <- wei_mort %>%
gather(key = "feature", value = "value", -stno, -e_19ac) %>%
group_by(feature, e_19ac) %>%
summarise(mean = mean(value),
sd = sd(value)) %>%
mutate(lab = paste0(format(round(mean, 1), nsmall = 1), " (", format(round(sd, 2), nsmall = 2), ")")) %>%
select(-mean, -sd) %>%
spread(key = "e_19ac", value = "lab") %>%
dplyr::rename("Non-dead" = "0", "Dead" = "1")
desc.tab.mort
wei_mort %>%
gather(key = "feature", value = "value", -stno, -e_19ac) %>%
group_by(feature, e_19ac) %>%
summarise(mean = mean(value),
sd = sd(value)) %>%
mutate(lab = paste0(format(round(mean, 1), nsmall = 1), " (", format(round(sd, 2), nsmall = 2), ")"))
table(wei_mort$e_19ac, exclude = NULL)
# > Mean & sd for each feature, by mortality status
desc.tab.mort <- wei_mort %>%
gather(key = "feature", value = "value", -stno, -e_19ac) %>%
group_by(feature, e_19ac) %>%
summarise(mean = mean(value),
sd = sd(value)) %>%
mutate(lab = paste0(format(round(mean, 1), nsmall = 1), " (", format(round(sd, 2), nsmall = 2), ")")) %>%
select(-mean, -sd) %>%
spread(key = "e_19ac", value = "lab") %>%
dplyr::rename("Non-dead" = "0", "Dead" = "1")
desc.tab.mort
mort <- read_dta("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Data\\05_WHITEHALL\\updateddisease_2019\\mort0919.dta") %>% select(stno, e_19ac)
mort <- read_dta("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Data\\05_WHITEHALL\\updateddisease_2019\\mort0919.dta")
mort %>% filter(is.na(e_19ac) ==T)
mort %>% filter(is.na(e_19ac) ==T) %>% View(.)
library(tidyverse)
library(haven)
#library(corrr)
#library(xlsx)
#library(testthat)
# packages for PCA and clustering
library(cluster)
library(FactoMineR)
library(factoextra)
# -----------------------------
# Data
# > Selected set of metrics (without number of bouts of different lengths)
#   Non-standardized metrics
load("00_DATA\\00_data_PCA_k_means.rda")
# Script name: 01_PCA_k_means_1.R
#
# Author: M.Chen, Inserm, 2021
#
# Doing:
#     1. Running PCA
#     2. Running k-means (k = 5)
# -----------------------------
# Packages
library(tidyverse)
library(haven)
#library(corrr)
#library(xlsx)
#library(testthat)
# packages for PCA and clustering
library(cluster)
library(FactoMineR)
library(factoextra)
# -----------------------------
# Data
# > Selected set of metrics (without number of bouts of different lengths)
#   Non-standardized metrics
load("00_DATA\\00_data_PCA_k_means.rda")
data_wei        <- data$wei
data_WD         <- data$WD
data_WE         <- data$WE
data_WD_WE      <- data$WD_WE
# with transformed variables (log(x+1))
data_wei_log    <- data$wei_log
data_WD_log     <- data$WD_log
data_WE_log     <- data$WE_log
data_WD_WE_log  <- data$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_sqrt   <- data$wei_sqrt
data_WD_sqrt    <- data$WD_sqrt
data_WE_sqrt    <- data$WE_sqrt
data_WD_WE_sqrt <- data$WD_WE_sqrt
#   Standardized metrics
load("00_DATA\\00_z_data_PCA_k_means.rda")
z_data_wei        <- z_data$wei
z_data_WD         <- z_data$WD
z_data_WE         <- z_data$WE
z_data_WD_WE      <- z_data$WD_WE
# with transformed variables (log(x+1))
z_data_wei_log    <- z_data$wei_log
z_data_WD_log     <- z_data$WD_log
z_data_WE_log     <- z_data$WE_log
z_data_WD_WE_log  <- z_data$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_sqrt   <- z_data$wei_sqrt
z_data_WD_sqrt    <- z_data$WD_sqrt
z_data_WE_sqrt    <- z_data$WE_sqrt
z_data_WD_WE_sqrt <- z_data$WD_WE_sqrt
# > Full set of metrics (with number of bouts of different lengths) - for Sensitivity analyses
#   Non-standardized variables
load("00_DATA\\00_data_full_PCA_k_means.rda")
data_wei_full        <- data_full$wei
data_WD_full         <- data_full$WD
data_WE_full         <- data_full$WE
data_WD_WE_full      <- data_full$WD_WE
# with transformed variables (log(x+1))
data_wei_full_log    <- data_full$wei_log
data_WD_full_log     <- data_full$WD_log
data_WE_full_log     <- data_full$WE_log
data_WD_WE_full_log  <- data_full$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_full_sqrt   <- data_full$wei_sqrt
data_WD_full_sqrt    <- data_full$WD_sqrt
data_WE_full_sqrt    <- data_full$WE_sqrt
data_WD_WE_full_sqrt <- data_full$WD_WE_sqrt
#   Standardized variables
load("00_DATA\\00_z_data_full_PCA_k_means.rda")
z_data_wei_full        <- z_data_full$wei
z_data_WD_full         <- z_data_full$WD
z_data_WE_full         <- z_data_full$WE
z_data_WD_WE_full      <- z_data_full$WD_WE
# with transformed variables (log(x+1))
z_data_wei_full_log    <- z_data_full$wei_log
z_data_WD_full_log     <- z_data_full$WD_log
z_data_WE_full_log     <- z_data_full$WE_log
z_data_WD_WE_full_log  <- z_data_full$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_full_sqrt   <- z_data_full$wei_sqrt
z_data_WD_full_sqrt    <- z_data_full$WD_sqrt
z_data_WE_full_sqrt    <- z_data_full$WE_sqrt
z_data_WD_WE_full_sqrt <- z_data_full$WD_WE_sqrt
# -----------------------------
# Functions to run PCA and k-means
source("02_PCA-K-means\\01_PCA_k_means_functions.R")
?NbClust
install.packages("NbClust")
library(NbClust)
library(NbClust)
?NbClust
head(z_data_wei_log)
rbind(z_data_wei_log, z_data_wei_full_log, z_data_wei_sqrt, z_data_wei_full_sqrt)
list(z_data_wei_log=z_data_wei_log, z_data_wei_full_log=z_data_wei_full_log, z_data_wei_sqrt=z_data_wei_sqrt, z_data_wei_full_sqrt=z_data_wei_full_sqrt) %>% map(., names(.))
list(z_data_wei_log=z_data_wei_log, z_data_wei_full_log=z_data_wei_full_log, z_data_wei_sqrt=z_data_wei_sqrt, z_data_wei_full_sqrt=z_data_wei_full_sqrt) %>% map(., level(.))
list(z_data_wei_log=z_data_wei_log, z_data_wei_full_log=z_data_wei_full_log, z_data_wei_sqrt=z_data_wei_sqrt, z_data_wei_full_sqrt=z_data_wei_full_sqrt) %>% map(., levels(.))
list(z_data_wei_log=z_data_wei_log, z_data_wei_full_log=z_data_wei_full_log, z_data_wei_sqrt=z_data_wei_sqrt, z_data_wei_full_sqrt=z_data_wei_full_sqrt) %>% map(., length(.))
list(z_data_wei_log=z_data_wei_log, z_data_wei_full_log=z_data_wei_full_log, z_data_wei_sqrt=z_data_wei_sqrt, z_data_wei_full_sqrt=z_data_wei_full_sqrt) %>% map(., length(.x))
?fviz_nbclust
nrow(z_data_wei_log)
cbind(z_data_wei_log, rep("Selected set (log-transformed skewed variables"), nrow(z_data_wei_log))
cbind(z_data_wei_log, title="Selected set (log-transformed skewed variables")
cbind(title="Selected set (log-transformed skewed variables)", z_data_wei_log)
cbind(title="Selected set (log-transformed skewed variables)", z_data_wei_log) %>% type(.)
cbind(title="Selected set (log-transformed skewed variables)", z_data_wei_log) %>% class(.)
test <- cbind(title = "Selected set (log-transformed skewed variables)", z_data_wei_log)
names(test[,c(-1)])
list(cbind(title = "Selected set (log-transformed skewed variables)", z_data_wei_log),
cbind(title = "Full set (log-transformed skewed variables)", z_data_wei_full_log),
cbind(title = "Selected set (root-squared skewed variables)", z_data_wei_sqrt),
cbind(title = "Full set (root-squared skewed variables)", z_data_wei_full_sqrt)) %>%
map(., ~ {
# > Remove first column for the tests
data_for_plot <- .x[,c(-1)]
# > Title of the plot
title_plot <- unique(.x$title)
# > Plotting
plot <- plot_grid(
fviz_nbclust(, kmeans, method = "wss")                                                  + ggtitle(label = paste0(title_plot), subtitle = "Elbow method"),
fviz_nbclust(.x, kmeans, method = "silhouette")                                         + ggtitle(label = "",                 subtitle = "Silhouette method"),
fviz_nbclust(.x, kmeans, nstart = 25, method = "gap_stat", nboot = 50, verbose = FALSE) + ggtitle(label = "",                 subtitle = "Gap statistic method"),
nrow = 2)
})
# additional packages
library(cowplot)
list(cbind(title = "Selected set (log-transformed skewed variables)", z_data_wei_log),
cbind(title = "Full set (log-transformed skewed variables)", z_data_wei_full_log),
cbind(title = "Selected set (root-squared skewed variables)", z_data_wei_sqrt),
cbind(title = "Full set (root-squared skewed variables)", z_data_wei_full_sqrt)) %>%
map(., ~ {
# > Remove first column for the tests
data_for_plot <- .x[,c(-1)]
# > Title of the plot
title_plot <- unique(.x$title)
# > Plotting
plot <- plot_grid(
fviz_nbclust(, kmeans, method = "wss")                                                  + ggtitle(label = paste0(title_plot), subtitle = "Elbow method"),
fviz_nbclust(.x, kmeans, method = "silhouette")                                         + ggtitle(label = "",                 subtitle = "Silhouette method"),
fviz_nbclust(.x, kmeans, nstart = 25, method = "gap_stat", nboot = 50, verbose = FALSE) + ggtitle(label = "",                 subtitle = "Gap statistic method"),
nrow = 2)
})
list(cbind(title = "Selected set (log-transformed skewed variables)", z_data_wei_log),
cbind(title = "Full set (log-transformed skewed variables)", z_data_wei_full_log),
cbind(title = "Selected set (root-squared skewed variables)", z_data_wei_sqrt),
cbind(title = "Full set (root-squared skewed variables)", z_data_wei_full_sqrt)) %>%
map(., ~ {
# > Remove first column for the tests
data_for_plot <- .x[,c(-1)]
# > Title of the plot
title_plot <- unique(.x$title)
# > Plotting
plot <- plot_grid(
fviz_nbclust(data_for_plot, kmeans, method = "wss")                                                  + ggtitle(label = paste0(title_plot), subtitle = "Elbow method"),
fviz_nbclust(data_for_plot, kmeans, method = "silhouette")                                         + ggtitle(label = "",                 subtitle = "Silhouette method"),
fviz_nbclust(data_for_plot, kmeans, nstart = 25, method = "gap_stat", nboot = 50, verbose = FALSE) + ggtitle(label = "",                 subtitle = "Gap statistic method"),
nrow = 2)
})
list(cbind(title = "Selected set (log-transformed skewed variables)", z_data_wei_log)) %>%
map(., ~ {
# > Remove first column for the tests
data_for_plot <- .x[,c(-1)]
# > Title of the plot
title_plot <- unique(.x$title)
# > Plot
plot <- plot_grid(
fviz_nbclust(data_for_plot, kmeans, method = "wss")                                                  + ggtitle(label = paste0(title_plot), subtitle = "Elbow method"),
fviz_nbclust(data_for_plot, kmeans, method = "silhouette")                                         + ggtitle(label = "",                 subtitle = "Silhouette method"),
fviz_nbclust(data_for_plot, kmeans, nstart = 25, method = "gap_stat", nboot = 50, verbose = FALSE) + ggtitle(label = "",                 subtitle = "Gap statistic method"),
nrow = 2)
# > Save the plot
ggsave(paste0("03_RESULTS//02_K-means//TEST_OPT_NB_CLUSTERS//Elbow-Silhouette-Gap_",title_plot,".png"),
width = 6, height = 6,
dpi = 300)
})
list(cbind(title = "Selected set (log-transformed skewed variables)", z_data_wei_log)) %>%
map(., ~ {
# > Remove first column for the tests
data_for_plot <- .x[,c(-1)]
# > Title of the plot
title_plot <- unique(.x$title)
# > Plot
plot <- plot_grid(
fviz_nbclust(data_for_plot, kmeans, method = "wss")                                                  + ggtitle(label = paste0(title_plot), subtitle = "Elbow method"),
fviz_nbclust(data_for_plot, kmeans, method = "silhouette")                                         + ggtitle(label = "",                 subtitle = "Silhouette method"),
fviz_nbclust(data_for_plot, kmeans, nstart = 25, method = "gap_stat", nboot = 50, verbose = FALSE) + ggtitle(label = "",                 subtitle = "Gap statistic method"),
nrow = 2)
# > Save the plot
ggsave(paste0("03_RESULTS//02_K-means//TEST_OPT_NB_CLUSTERS//Elbow-Silhouette-Gap_",title_plot,".png"),
width = 10, height = 6,
dpi = 300)
})
list(cbind(title = "Selected set (log-transformed skewed variables)", z_data_wei_log),
cbind(title = "Full set (log-transformed skewed variables)",     z_data_wei_full_log),
cbind(title = "Selected set (root-squared skewed variables)",    z_data_wei_sqrt),
cbind(title = "Full set (root-squared skewed variables)",        z_data_wei_full_sqrt)) %>%
map(., ~ {
# > Remove first column for the tests
data_for_plot <- .x[,c(-1)]
# > Title of the plot
title_plot <- unique(.x$title)
# > Plot
plot <- plot_grid(
fviz_nbclust(data_for_plot, kmeans, method = "wss")                                                  + ggtitle(label = paste0(title_plot), subtitle = "Elbow method"),
fviz_nbclust(data_for_plot, kmeans, method = "silhouette")                                         + ggtitle(label = "",                 subtitle = "Silhouette method"),
fviz_nbclust(data_for_plot, kmeans, nstart = 25, method = "gap_stat", nboot = 50, verbose = FALSE) + ggtitle(label = "",                 subtitle = "Gap statistic method"),
nrow = 2)
# > Save the plot
ggsave(paste0("03_RESULTS//02_K-means//TEST_OPT_NB_CLUSTERS//Elbow-Silhouette-Gap_",title_plot,".png"),
width = 10, height = 6,
dpi = 300)
})
fviz_nbclust(z_data_WD_WE_log, kmeans, method = "wss", linecolor = "darkred")
fviz_nbclust(z_data_WD_WE_log, kmeans, method = "darkred", linecolor = "darkred")
fviz_nbclust(z_data_WD_WE_log, kmeans, method = "silhouette", linecolor = "darkred")
fviz_nbclust(z_data_WD_WE_log, kmeans, nstart = 25, method = "gap_stat", nboot = 50, verbose = FALSE, linecolor = "darkred")
# > Week/weekend days average
list(cbind(title = "Selected set (log-transformed skewed variables)", z_data_WD_WE_log),
cbind(title = "Full set (log-transformed skewed variables)",     z_data_WD_WE_full_log),
cbind(title = "Selected set (root-squared skewed variables)",    z_data_WD_WE_sqrt),
cbind(title = "Full set (root-squared skewed variables)",        z_data_WD_WE_full_sqrt)) %>%
map(., ~ {
# > Remove first column for the tests
data_for_plot <- .x[,c(-1)]
# > Title of the plot
title_plot <- unique(.x$title)
# > Plot
plot <- plot_grid(
fviz_nbclust(data_for_plot, kmeans, method = "wss", linecolor = "darkred")                                                + ggtitle(label = paste0(title_plot), subtitle = "Elbow method"),
fviz_nbclust(data_for_plot, kmeans, method = "silhouette", linecolor = "darkred")                                         + ggtitle(label = "",                 subtitle = "Silhouette method"),
fviz_nbclust(data_for_plot, kmeans, method = "gap_stat", nstart = 25, nboot = 50, verbose = FALSE, linecolor = "darkred") + ggtitle(label = "",                 subtitle = "Gap statistic method"),
nrow = 2)
# > Save the plot
ggsave(paste0("03_RESULTS//02_K-means//TEST_OPT_NB_CLUSTERS//WD_WE-Elbow-Silhouette-Gap_",title_plot,".png"),
width = 10, height = 6,
dpi = 300)
})
nb_wei_log       <- NbClust(data = z_data_wei_log,       diss = NULL, distance = "euclidean", min.nc = 2, max.nc = 6, method = "kmeans")
fviz_nbclust(nb_wei_log)
nb_wei_full_log  <- NbClust(data = z_data_wei_full_log,  diss = NULL, distance = "euclidean", min.nc = 2, max.nc = 6, method = "kmeans")
is.na(z_data_wei_full_log)
z_data_wei_full_log[is.na(z_data_wei_full_log) == TRUE]
nb_WD_WE_log       <- NbClust(data = z_data_WD_WE_log,       diss = NULL, distance = "euclidean", min.nc = 2, max.nc = 6, method = "kmeans")
fviz_nbclust(nb_WD_WE_log)
# > Selected set of metrics (without number of bouts of different lengths)
#   Non-standardized metrics
load("00_DATA\\00_data_PCA_k_means.rda")
data_wei        <- data$wei
data_WD_WE      <- data$WD_WE
# with transformed variables (log(x+1))
data_wei_log    <- data$wei_log
data_WD_WE_log  <- data$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_sqrt   <- data$wei_sqrt
data_WD_WE_sqrt <- data$WD_WE_sqrt
#   Standardized metrics
load("00_DATA\\00_z_data_PCA_k_means.rda")
z_data_wei        <- z_data$wei
z_data_WD_WE      <- z_data$WD_WE
# with transformed variables (log(x+1))
z_data_wei_log    <- z_data$wei_log
z_data_WD_WE_log  <- z_data$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_sqrt   <- z_data$wei_sqrt
z_data_WD_WE_sqrt <- z_data$WD_WE_sqrt
# > Full set of metrics (with number of bouts of different lengths) - for Sensitivity analyses
#   Non-standardized variables
load("00_DATA\\00_data_full_PCA_k_means.rda")
data_wei_full        <- data_full$wei
data_WD_WE_full      <- data_full$WD_WE
# with transformed variables (log(x+1))
data_wei_full_log    <- data_full$wei_log
data_WD_WE_full_log  <- data_full$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_full_sqrt   <- data_full$wei_sqrt
data_WD_WE_full_sqrt <- data_full$WD_WE_sqrt
#   Standardized variables
load("00_DATA\\00_z_data_full_PCA_k_means.rda")
z_data_wei_full        <- z_data_full$wei
z_data_WD_WE_full      <- z_data_full$WD_WE
# with transformed variables (log(x+1))
z_data_wei_full_log    <- z_data_full$wei_log
z_data_WD_WE_full_log  <- z_data_full$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_full_sqrt   <- z_data_full$wei_sqrt
z_data_WD_WE_full_sqrt <- z_data_full$WD_WE_sqrt
# -----------------------------
# Functions to run PCA and k-means
source("02_PCA-K-means\\00_functions.R")
# All days
PCA.wei_log  <- do.pca(z_data_wei_log)  # (log-transformed skewed variables)
PCA.wei_sqrt <- do.pca(z_data_wei_sqrt) # (sqrt-transformed skewed variables)
# WD & WE days
PCA.WDWE_log  <- do.pca(z_data_WD_WE_log)  # (log-transformed skewed variables)
PCA.WDWE_sqrt <- do.pca(z_data_WD_WE_sqrt) # (sqrt-transformed skewed variables)
# > Second analysis - full set of metrics (including number of bouts of different length)
# All days
PCA.wei_full_log  <- do.pca(z_data_wei_full_log)  # (log-transformed skewed variables)
PCA.wei_full_sqrt <- do.pca(z_data_wei_full_sqrt) # (sqrt-transformed skewed variables)
# WD & WE days
PCA.WDWE_full_log  <- do.pca(z_data_WD_WE_full_log)  # (log-transformed skewed variables)
PCA.WDWE_full_sqrt <- do.pca(z_data_WD_WE_full_sqrt) # (sqrt-transformed skewed variables)
# > Classify participants based on principal component value (below or above the median)
new_data_wei_log         <- class.n.PC(PCA.wei_log$pca,        n = 10,     input.data = data_wei_log)
new_data_wei_sqrt        <- class.n.PC(PCA.wei_sqrt$pca,       n = 10,     input.data = data_wei_sqrt)
new_data_WD_WE_log       <- class.n.PC(PCA.WDWE_log$pca,       n = 10,     input.data = data_WD_WE_log)
new_data_WD_WE_sqrt      <- class.n.PC(PCA.WDWE_sqrt$pca,      n = 10,     input.data = data_WD_WE_sqrt)
new_data_wei_full_log    <- class.n.PC(PCA.wei_full_log$pca,   n = 10,     input.data = data_wei_full_log)
new_data_wei_full_sqrt   <- class.n.PC(PCA.wei_full_sqrt$pca,  n = 10,     input.data = data_wei_full_sqrt)
new_data_WD_WE_full_log  <- class.n.PC(PCA.WDWE_full_log$pca,  n = 10,     input.data = data_WD_WE_full_log)
new_data_WD_WE_full_sqrt <- class.n.PC(PCA.WDWE_full_sqrt$pca, n = 10,     input.data = data_WD_WE_full_sqrt)
warnings()
PCA.wei_log
# > First analysis - selected set of metrics
# All days
PCA.wei_log  <- do.pca(z_data_wei_log)  # (log-transformed skewed variables)
warnings(... = )
# > First analysis - selected set of metrics
# All days
PCA.wei_log  <- do.pca(z_data_wei_log)  # (log-transformed skewed variables)
warnings()
do.pca
source("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\02_PCA-K-means\\01_PCA_k_means_functions.R")
source("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\02_PCA-K-means\\00_functions.R")
# > First analysis - selected set of metrics
# All days
PCA.wei_log  <- do.pca(z_data_wei_log)  # (log-transformed skewed variables)
warnings
warnings()
# Script name: 02_PCA_k_means_models.R
#
# Author: M.Chen, Inserm, 2021
#
# Doing:
#     1. Perform data dimension reduction through PCA,
#        - Compute principal components (PC),
#        - Classify participants based on PC value (below or above the median)
#     2. Cluster analysis using k-means
#        - Cluster analysis (predefined number of clusters: k = 5)
#        - Store clustering in a new variable in the non-standardized data
#        - Save the dataset for regression analyses and plots
# Note: to properly load data and function scripts, open the PCA-K-means-for-PA-features R.project or
# set the working directory within the corresponding folder on your computer
# Note 2: the scripts to plot and save results from the analyses are provided in a separate R script
# source("02_PCA-K-means\\03_graphs.R")
# -----------------------------
# Packages
library(tidyverse)
library(haven)
# packages for PCA and clustering
library(cluster)
library(FactoMineR)
library(factoextra)
# -----------------------------
# Data
# > Selected set of metrics (without number of bouts of different lengths)
#   Non-standardized metrics
load("00_DATA\\00_data_PCA_k_means.rda")
data_wei        <- data$wei
data_WD_WE      <- data$WD_WE
# with transformed variables (log(x+1))
data_wei_log    <- data$wei_log
data_WD_WE_log  <- data$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_sqrt   <- data$wei_sqrt
data_WD_WE_sqrt <- data$WD_WE_sqrt
#   Standardized metrics
load("00_DATA\\00_z_data_PCA_k_means.rda")
z_data_wei        <- z_data$wei
z_data_WD_WE      <- z_data$WD_WE
# with transformed variables (log(x+1))
z_data_wei_log    <- z_data$wei_log
z_data_WD_WE_log  <- z_data$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_sqrt   <- z_data$wei_sqrt
z_data_WD_WE_sqrt <- z_data$WD_WE_sqrt
# > Full set of metrics (with number of bouts of different lengths) - for Sensitivity analyses
#   Non-standardized variables
load("00_DATA\\00_data_full_PCA_k_means.rda")
data_wei_full        <- data_full$wei
data_WD_WE_full      <- data_full$WD_WE
# with transformed variables (log(x+1))
data_wei_full_log    <- data_full$wei_log
data_WD_WE_full_log  <- data_full$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_full_sqrt   <- data_full$wei_sqrt
data_WD_WE_full_sqrt <- data_full$WD_WE_sqrt
#   Standardized variables
load("00_DATA\\00_z_data_full_PCA_k_means.rda")
z_data_wei_full        <- z_data_full$wei
z_data_WD_WE_full      <- z_data_full$WD_WE
# with transformed variables (log(x+1))
z_data_wei_full_log    <- z_data_full$wei_log
z_data_WD_WE_full_log  <- z_data_full$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_full_sqrt   <- z_data_full$wei_sqrt
z_data_WD_WE_full_sqrt <- z_data_full$WD_WE_sqrt
# -----------------------------
# Functions to run PCA and k-means
source("02_PCA-K-means\\00_functions.R")
library(tidyverse)
library(haven)
# packages for PCA and clustering
library(cluster)
library(FactoMineR)
library(factoextra)
# -----------------------------
# Data
# > Selected set of metrics (without number of bouts of different lengths)
#   Non-standardized metrics
load("00_DATA\\00_data_PCA_k_means.rda")
data_wei        <- data$wei
data_WD_WE      <- data$WD_WE
# with transformed variables (log(x+1))
data_wei_log    <- data$wei_log
data_WD_WE_log  <- data$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_sqrt   <- data$wei_sqrt
data_WD_WE_sqrt <- data$WD_WE_sqrt
#   Standardized metrics
load("00_DATA\\00_z_data_PCA_k_means.rda")
z_data_wei        <- z_data$wei
z_data_WD_WE      <- z_data$WD_WE
# with transformed variables (log(x+1))
z_data_wei_log    <- z_data$wei_log
z_data_WD_WE_log  <- z_data$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_sqrt   <- z_data$wei_sqrt
z_data_WD_WE_sqrt <- z_data$WD_WE_sqrt
# > Full set of metrics (with number of bouts of different lengths) - for Sensitivity analyses
#   Non-standardized variables
load("00_DATA\\00_data_full_PCA_k_means.rda")
data_wei_full        <- data_full$wei
data_WD_WE_full      <- data_full$WD_WE
# with transformed variables (log(x+1))
data_wei_full_log    <- data_full$wei_log
data_WD_WE_full_log  <- data_full$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_full_sqrt   <- data_full$wei_sqrt
data_WD_WE_full_sqrt <- data_full$WD_WE_sqrt
#   Standardized variables
load("00_DATA\\00_z_data_full_PCA_k_means.rda")
z_data_wei_full        <- z_data_full$wei
z_data_WD_WE_full      <- z_data_full$WD_WE
# with transformed variables (log(x+1))
z_data_wei_full_log    <- z_data_full$wei_log
z_data_WD_WE_full_log  <- z_data_full$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_full_sqrt   <- z_data_full$wei_sqrt
z_data_WD_WE_full_sqrt <- z_data_full$WD_WE_sqrt
# -----------------------------
# Functions to run PCA and k-means
source("02_PCA-K-means\\00_functions.R")
# -----------------------------
# PCA
# > First analysis - selected set of metrics
# All days
PCA.wei_log  <- do.pca(z_data_wei_log)  # (log-transformed skewed variables)
