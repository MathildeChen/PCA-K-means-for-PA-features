"Duration MVPA (min/day)",                      t.test(data_named$WD$`Duration MVPA (min/day) - Week days`,                      data_named$WE$`Duration MVPA (min/day) - Weekend days`)$p.value,                      wilcox.test(data_named$WD$`Duration MVPA (min/day) - Week days`,                      data_named$WE$`Duration MVPA (min/day) - Weekend days`)$p.value,
"Intensity gradient intercept",                 t.test(data_named$WD$`Intensity gradient intercept - Week days`,                 data_named$WE$`Intensity gradient intercept - Weekend days`)$p.value,                 NA,
"Intensity gradient slope",                     t.test(data_named$WD$`Intensity gradient slope - Week days`,                     data_named$WE$`Intensity gradient slope - Weekend days`)$p.value,                     NA,
"Mean duration of IN bouts",                    t.test(data_named$WD$`Mean duration of IN bouts - Week days`,                    data_named$WE$`Mean duration of IN bouts - Weekend days`)$p.value,                    NA,
"Mean duration of LIPA bouts",                  t.test(data_named$WD$`Mean duration of LIPA bouts - Week days`,                  data_named$WE$`Mean duration of LIPA bouts - Weekend days`)$p.value,                  NA,
"Mean duration of MVPA bouts",                  t.test(data_named$WD$`Mean duration of MVPA bouts - Week days`,                  data_named$WE$`Mean duration of MVPA bouts - Weekend days`)$p.value,                  wilcox.test(data_named$WD$`Mean duration of MVPA bouts - Week days`,                  data_named$WE$`Mean duration of MVPA bouts - Weekend days`)$p.value,
"Most active 5hrs timing",                      t.test(data_named$WD$`Most active 5hrs timing - Week days`,                      data_named$WE$`Most active 5hrs timing - Weekend days`)$p.value,                      wilcox.test(data_named$WD$`Most active 5hrs timing - Week days`,                      data_named$WE$`Most active 5hrs timing - Weekend days`)$p.value,
"Number of IN bouts",                           t.test(data_named$WD$`Number of IN bouts - Week days`,                           data_named$WE$`Number of IN bouts - Weekend days`)$p.value,                           NA,
"Number of LIPA bouts",                         t.test(data_named$WD$`Number of LIPA bouts - Week days`,                         data_named$WE$`Number of LIPA bouts - Weekend days`)$p.value,                         NA,
"Number of MVPA bouts",                         t.test(data_named$WD$`Number of MVPA bouts - Week days`,                         data_named$WE$`Number of MVPA bouts - Weekend days`)$p.value,                         wilcox.test(data_named$WD$`Number of MVPA bouts - Week days`,                         data_named$WE$`Number of MVPA bouts - Weekend days`)$p.value,
"Number of < 10 min IN fragments (unbouted)",   t.test(data_named$WD$`Number of < 10 min IN fragments (unbouted) - Week days`,   data_named$WE$`Number of < 10 min IN fragments (unbouted) - Weekend days`)$p.value,   NA,
"Number of 10-30 min IN fragments",             t.test(data_named$WD$`Number of 10-30 min IN fragments - Week days`,             data_named$WE$`Number of 10-30 min IN fragments - Weekend days`)$p.value,             NA,
"Number of > 30 min IN fragments",              t.test(data_named$WD$`Number of > 30 min IN fragments - Week days`,              data_named$WE$`Number of > 30 min IN fragments - Weekend days`)$p.value,              NA,
"Number of < 10 min LIPA fragments (unbouted)", t.test(data_named$WD$`Number of < 10 min LIPA fragments (unbouted) - Week days`, data_named$WE$`Number of < 10 min LIPA fragments (unbouted) - Weekend days`)$p.value, NA,
"Number of > 10 min LIPA fragments",            t.test(data_named$WD$`Number of > 10 min LIPA fragments - Week days`,            data_named$WE$`Number of > 10 min LIPA fragments - Weekend days`)$p.value,            wilcox.test(data_named$WD$`Number of > 10 min LIPA fragments - Week days`,            data_named$WE$`Number of > 10 min LIPA fragments - Weekend days`)$p.value,
"Number of < 10 min MVPA fragments (unbouted)", t.test(data_named$WD$`Number of < 10 min MVPA fragments (unbouted) - Week days`, data_named$WE$`Number of < 10 min MVPA fragments (unbouted) - Weekend days`)$p.value, wilcox.test(data_named$WD$`Number of < 10 min MVPA fragments (unbouted) - Week days`, data_named$WE$`Number of < 10 min MVPA fragments (unbouted) - Weekend days`)$p.value,
"Number of > 10 min MVPA fragments",            t.test(data_named$WD$`Number of > 10 min MVPA fragments - Week days`,            data_named$WE$`Number of > 10 min MVPA fragments - Weekend days`)$p.value,            wilcox.test(data_named$WD$`Number of > 10 min MVPA fragments - Week days`,            data_named$WE$`Number of > 10 min MVPA fragments - Weekend days`)$p.value
) %>%
# Labels
mutate(p.t.test.round   = if_else(format(round(p.t.test, digits = 4), nsmall = 3) < 0.001, "<0.001", as.character(format(round(p.t.test, digits = 4), nsmall = 3))),
p.wilcoxon.round = if_else(is.na(p.wilcoxon) == T, "NA", if_else(format(round(p.wilcoxon, digits = 4), nsmall = 3) < 0.001, "<0.001", as.character(format(round(p.wilcoxon, digits = 4), nsmall = 3)))))
# > Mean, sd of all PA metrics, p for difference between week days and weekend days (t-test; $: Wilcoxon test for skewed variables)
desc.tab %>%
# Label containing mean and sd for each metric
mutate(mean.sd.lab = paste0(format(round(mean, 1), nsmall = 1), " (", format(round(sd, 2), nsmall = 2), ")")) %>%
select(-mean, -sd, -min, -max, -q25, -q50, -q75) %>%
spread(key = "day_type", value = "mean.sd.lab") %>%
# Add p value
left_join(t.test.num, by = "feature") %>%
mutate(p = if_else(p.wilcoxon.round == "NA", p.t.test.round, paste0(p.wilcoxon.round, "$"))) %>%
select(-p.t.test, -p.t.test.round, -p.wilcoxon, -p.wilcoxon.round) %>%
# Add a column for distinguish variables for sensitivity analysis
mutate(analysis = if_else(feature %in% c("Number of < 10 min IN fragments (unbouted)", "Number of 10-30 min IN fragments", "Number of > 30 min IN fragments",
"Number of < 10 min LIPA fragments (unbouted)", "Number of > 10 min LIPA fragments",
"Number of < 10 min MVPA fragments (unbouted)","Number of > 10 min MVPA fragments"), "Sensitivity analysis", "Main analysis")) %>%
arrange(analysis, feature)
# > To do
library(haven)
particip <- read_dta("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Data\\05_WHITEHALL\\s1quest.dta") %>% select(stno, sex)
# > Descriptive table of the (non-standardized) variables
wei_sex <- particip %>%
right_join(data_named$wei, by = "stno")
# > Mean & sd for each feature, by sex
desc.tab.sex <- wei_sex %>%
gather(key = "feature", value = "value", -stno, -sex) %>%
group_by(feature, sex) %>%
summarise(mean = mean(value),
sd = sd(value)) %>%
mutate(lab = paste0(format(round(mean, 1), nsmall = 1), " (", format(round(sd, 2), nsmall = 2), ")")) %>%
select(-mean, -sd) %>%
spread(key = "sex", value = "lab") %>%
dplyr::rename("Men" = "1", "Women" = "2")
# > T-test or Wilcoxon test for skewed variables
t.test.num.sex <- tibble::tribble(
~feature,                                       ~p.t.test,                                                                                        ~p.wilcoxon,
"Acceleration (mg)",                            t.test(`Acceleration (mg) - All days` ~ sex, data = wei_sex)$p.value,                            wilcox.test(`Acceleration (mg) - All days` ~ sex, data = wei_sex)$p.value,
"Duration IN (min/day)",                        t.test(`Duration IN (min/day) - All days` ~ sex, data = wei_sex)$p.value,                        wilcox.test(`Duration IN (min/day) - All days` ~ sex, data = wei_sex)$p.value,
"Duration LIPA (min/day)",                      t.test(`Duration LIPA (min/day) - All days` ~ sex, data = wei_sex)$p.value,                      NA,
"Duration MVPA (min/day)",                      t.test(`Duration MVPA (min/day) - All days` ~ sex, data = wei_sex)$p.value,                      wilcox.test(`Duration MVPA (min/day) - All days` ~ sex, data = wei_sex)$p.value,
"Intensity gradient intercept",                 t.test(`Intensity gradient intercept - All days` ~ sex, data = wei_sex)$p.value,                 NA,
"Intensity gradient slope",                     t.test(`Intensity gradient slope - All days` ~ sex, data = wei_sex)$p.value,                     NA,
"Mean duration of IN bouts",                    t.test(`Mean duration of IN bouts - All days` ~ sex, data = wei_sex)$p.value,                    NA,
"Mean duration of LIPA bouts",                  t.test(`Mean duration of LIPA bouts - All days` ~ sex, data = wei_sex)$p.value,                  NA,
"Mean duration of MVPA bouts",                  t.test(`Mean duration of MVPA bouts - All days` ~ sex, data = wei_sex)$p.value,                  wilcox.test(`Mean duration of MVPA bouts - All days` ~ sex, data = wei_sex)$p.value,
"Most active 5hrs timing",                      t.test(`Most active 5hrs timing - All days` ~ sex, data = wei_sex)$p.value,                      wilcox.test(`Most active 5hrs timing - All days` ~ sex, data = wei_sex)$p.value,
"Number of IN bouts",                           t.test(`Number of IN bouts - All days` ~ sex, data = wei_sex)$p.value,                           NA,
"Number of LIPA bouts",                         t.test(`Number of LIPA bouts - All days` ~ sex, data = wei_sex)$p.value,                         NA,
"Number of MVPA bouts",                         t.test(`Number of MVPA bouts - All days` ~ sex, data = wei_sex)$p.value,                         wilcox.test(`Number of MVPA bouts - All days` ~ sex, data = wei_sex)$p.value,
"Number of < 10 min IN fragments (unbouted)",   t.test(`Number of < 10 min IN fragments (unbouted) - All days` ~ sex, data = wei_sex)$p.value,   NA,
"Number of 10-30 min IN fragments",             t.test(`Number of 10-30 min IN fragments - All days` ~ sex, data = wei_sex)$p.value,             NA,
"Number of > 30 min IN fragments",              t.test(`Number of > 30 min IN fragments - All days` ~ sex, data = wei_sex)$p.value,              NA,
"Number of < 10 min LIPA fragments (unbouted)", t.test(`Number of < 10 min LIPA fragments (unbouted) - All days` ~ sex, data = wei_sex)$p.value, NA,
"Number of > 10 min LIPA fragments",            t.test(`Number of > 10 min LIPA fragments - All days` ~ sex, data = wei_sex)$p.value,            wilcox.test(`Number of > 10 min LIPA fragments - All days` ~ sex, data = wei_sex)$p.value,
"Number of < 10 min MVPA fragments (unbouted)", t.test(`Number of < 10 min MVPA fragments (unbouted) - All days` ~ sex, data = wei_sex)$p.value, wilcox.test(`Number of < 10 min MVPA fragments (unbouted) - All days` ~ sex, data = wei_sex)$p.value,
"Number of > 10 min MVPA fragments",            t.test(`Number of > 10 min MVPA fragments - All days` ~ sex, data = wei_sex)$p.value,            wilcox.test(`Number of > 10 min MVPA fragments - All days` ~ sex, data = wei_sex)$p.value) %>%
# Labels
mutate(p.t.test.round   = if_else(format(round(p.t.test, digits = 4), nsmall = 3) < 0.001, "<0.001", as.character(format(round(p.t.test, digits = 4), nsmall = 3))),
p.wilcoxon.round = if_else(is.na(p.wilcoxon) == T, "NA", if_else(format(round(p.wilcoxon, digits = 4), nsmall = 3) < 0.001, "<0.001", as.character(format(round(p.wilcoxon, digits = 4), nsmall = 3)))))
# > Mean, sd of all PA metrics, p for difference between week days and weekend days (t-test; $: Wilcoxon test for skewed variables)
desc.tab.sex %>%
mutate(feature = substr(feature, 1, nchar(feature) - 11)) %>%
# Add p value
left_join(t.test.num.sex, by = "feature") %>%
mutate(p = if_else(p.wilcoxon.round == "NA", p.t.test.round, paste0(p.wilcoxon.round, "$"))) %>%
select(-p.t.test, -p.t.test.round, -p.wilcoxon, -p.wilcoxon.round) %>%
# Add a column for distinguish variables for sensitivity analysis
mutate(analysis = if_else(feature %in% c("Number of < 10 min IN fragments (unbouted)", "Number of 10-30 min IN fragments", "Number of > 30 min IN fragments",
"Number of < 10 min LIPA fragments (unbouted)", "Number of > 10 min LIPA fragments",
"Number of < 10 min MVPA fragments (unbouted)","Number of > 10 min MVPA fragments"), "Sensitivity analysis", "Main analysis")) %>%
arrange(analysis, feature)
# > All PA metrics (with number of bouts of different lengths)
#   Non-standardized metrics
load("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\00_DATA\\00_data_full_PCA_k_means.rda")
# > All PA metrics (with number of bouts of different lengths)
#   Non-standardized metrics
load("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\00_DATA\\00_data_full_PCA_k_means.rda")
View(data_full)
head(data_full$wei_log)
# > All PA metrics (with number of bouts of different lengths)
#   Non-standardized metrics
load("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\00_DATA\\00_z_data_full_PCA_k_means.rda")
head(z_data_full$wei_log)
summary(z_data_full$wei_log)
log(0.3644667)
exp(0.3644667)
exp(1.289903)
?sd
log(2+1)
log1p(2+1)
log1p(2)
# -----------------------------
# Packages
#library(multcomp)
library(tidyverse)
library(haven)
# packages for PCA and clustering
library(cluster)
library(FactoMineR)
library(factoextra)
# > Selected set of metrics (without number of bouts of different lengths)
#   Non-standardized metrics
load("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\00_DATA\\00_data_PCA_k_means.rda")
data_wei        <- data$wei
data_WD         <- data$WD
data_WE         <- data$WE
data_WD_WE      <- data$WD_WE
# with transformed variables (log(x+1))
data_wei_log    <- data$wei_log
data_WD_log     <- data$WD_log
data_WE_log     <- data$WE_log
data_WD_WE_log  <- data$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_sqrt   <- data$wei_sqrt
data_WD_sqrt    <- data$WD_sqrt
data_WE_sqrt    <- data$WE_sqrt
data_WD_WE_sqrt <- data$WD_WE_sqrt
#   Standardized metrics
load("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\00_DATA\\00_z_data_PCA_k_means.rda")
z_data_wei        <- z_data$wei
z_data_WD         <- z_data$WD
z_data_WE         <- z_data$WE
z_data_WD_WE      <- z_data$WD_WE
# with transformed variables (log(x+1))
z_data_wei_log    <- z_data$wei_log
z_data_WD_log     <- z_data$WD_log
z_data_WE_log     <- z_data$WE_log
z_data_WD_WE_log  <- z_data$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_sqrt   <- z_data$wei_sqrt
z_data_WD_sqrt    <- z_data$WD_sqrt
z_data_WE_sqrt    <- z_data$WE_sqrt
z_data_WD_WE_sqrt <- z_data$WD_WE_sqrt
# > Full set of metrics (with number of bouts of different lengths) - for Sensitivity analyses
#   Non-standardized variables
load("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\00_DATA\\00_data_full_PCA_k_means.rda")
data_wei_full        <- data_full$wei
data_WD_full         <- data_full$WD
data_WE_full         <- data_full$WE
data_WD_WE_full      <- data_full$WD_WE
# with transformed variables (log(x+1))
data_wei_full_log    <- data_full$wei_log
data_WD_full_log     <- data_full$WD_log
data_WE_full_log     <- data_full$WE_log
data_WD_WE_full_log  <- data_full$WD_WE_log
# with transformed variables (sqrt(x))
data_wei_full_sqrt   <- data_full$wei_sqrt
data_WD_full_sqrt    <- data_full$WD_sqrt
data_WE_full_sqrt    <- data_full$WE_sqrt
data_WD_WE_full_sqrt <- data_full$WD_WE_sqrt
#   Standardized variables
load("\\\\172.27.137.244\\vieillissement$\\Post doc & PhD\\Mathilde\\Analysis\\02_ARTICLE_2\\PCA-K-means-for-PA-features\\00_DATA\\00_z_data_full_PCA_k_means.rda")
z_data_wei_full        <- z_data_full$wei
z_data_WD_full         <- z_data_full$WD
z_data_WE_full         <- z_data_full$WE
z_data_WD_WE_full      <- z_data_full$WD_WE
# with transformed variables (log(x+1))
z_data_wei_full_log    <- z_data_full$wei_log
z_data_WD_full_log     <- z_data_full$WD_log
z_data_WE_full_log     <- z_data_full$WE_log
z_data_WD_WE_full_log  <- z_data_full$WD_WE_log
# with transformed variables (sqrt(x))
z_data_wei_full_sqrt   <- z_data_full$wei_sqrt
z_data_WD_full_sqrt    <- z_data_full$WD_sqrt
z_data_WE_full_sqrt    <- z_data_full$WE_sqrt
z_data_WD_WE_full_sqrt <- z_data_full$WD_WE_sqrt
# -----------------------------
# Functions to run PCA and k-means
source("E://PC_FIXE//Analysis//02_ARTICLE_2//02_PCA_and_K-MEANS//01_PCA_k_means_functions.R")
# > Function to run PCA and store results
do.pca <- function(data_for_pca){
# > Check if data are standardized
#   Mean of means should be = 0, mean of sd should be = 1
mean_data <- mean(round(apply(data_for_pca, MARGIN = 2, FUN = mean)))
sd_data <- mean(round(apply(data_for_pca, MARGIN = 2, FUN = sd)))
testthat::expect_equal(mean_data, 0)
testthat::expect_equal(sd_data, 1)
# > Check if any NA
#   There should be no na
na_data <- sum(apply(is.na(data_for_pca),2,sum))
testthat::expect_equal(na_data, 0)
# > Compute PCA
pca <- prcomp(x = data_for_pca, tol = 0.05)
# > Get results from PCA
# Eigen values
pca.eig <- get_eigenvalue(pca)
# Variables results
res.var <- suppressWarnings(get_pca_var(pca))
pca.var <- data.frame(
coord = res.var$coord,        # Coordonnées
contrib = res.var$contrib,    # Contributions aux axes
cos2 = res.var$cos2,          # Qualité de représentation
cor = res.var$cor             # Correlation
)
# Individuals results
res.ind <- get_pca_ind(pca)
pca.ind <- data.frame(
ind.coord = res.ind$coord,        # Coordonnées
ind.contrib = res.ind$contrib,    # Contributions aux axes
ind.cos2 = res.ind$cos2           # Qualité de représentation
)
# > Store results
pca.res <- list(pca = pca,
pca.eig = pca.eig,
pca.var = pca.var,
pca.ind = pca.ind)
return(pca.res)
}
desc.n.PC <- function(pca.obj, n, desc.data){
# > Create the list to be filled
tab.PC <- list()
# > Identify people below or above median PC
for(i in 1:n)
{
# > Name of the PC
PC_n <- paste0("PC", i)
# > Median PC
med_PC_n <- median(pca.obj$x[,paste0(PC_n)])
# > Identify people below or above median PC
indices_belowmedian = which(pca.obj$x[,paste0(PC_n)] <  med_PC_n)
indices_abovemedian = which(pca.obj$x[,paste0(PC_n)] >= med_PC_n)
# > Check
expect_equal(min(pca.obj$x[indices_abovemedian,paste0(PC_n)]) >= med_PC_n, TRUE)
expect_equal(max(pca.obj$x[indices_belowmedian,paste0(PC_n)]) < med_PC_n, TRUE)
# > Corresponding PA data for describing the PC
data_belowmedian = desc.data[indices_belowmedian,]
data_abovemedian = desc.data[indices_abovemedian,]
comp.metrics <- list()
# > For each PA feature, compute mean and sd in data_belowmedian and data_abovemedian
for(m in 1:length(names(desc.data)))
{
# Name of the PA feature
m_names <- names(desc.data)[m]
# Compute mean, sd and p value for t test
comp.metrics[[paste0(names(desc.data)[m])]] <- data.frame(
# > mean
mean_below = mean(data_belowmedian[,paste0(m_names)]),
mean_above = mean(data_abovemedian[,paste0(m_names)]),
# > sd
sd_below = sd(data_belowmedian[,paste0(m_names)]),
sd_above = sd(data_abovemedian[,paste0(m_names)]),
# > t test
p.value = t.test(data_belowmedian[,paste0(m_names)],
data_abovemedian[,paste0(m_names)],
paired = TRUE)$p.value) %>%
# > Labels
mutate(Below_median = paste0(format(round(mean_below, 1), nsmall = 1), " (", format(round(sd_below, 2), nsmall = 2), ")"),
Above_median = paste0(format(round(mean_above, 1), nsmall = 1), " (", format(round(sd_above, 2), nsmall = 2), ")")) %>%
mutate(P.VALUE = format(round(p.value, 2), nsmall = 2),
P.VALUE = as.character(P.VALUE),
P.VALUE = if_else(P.VALUE == "0.00", "< 0.001", P.VALUE)) %>%
select(Below_median, Above_median, P.VALUE)
}
# Save results
tab.PC[[paste0(PC_n)]] <- plyr::ldply(comp.metrics,
data.frame,
.id = "metric")
# Reset table
comp.metrics <- NULL
}
return(tab.PC)
}
# > First analysis - selected set of metrics
# All days
PCA.wei_log  <- do.pca(z_data_wei_log)  # (log-transformed skewed variables)
PCA.wei_sqrt <- do.pca(z_data_wei_sqrt) # (sqrt-transformed skewed variables)
# WD & WE days
PCA.WDWE_log  <- do.pca(z_data_WD_WE_log)  # (log-transformed skewed variables)
PCA.WDWE_sqrt <- do.pca(z_data_WD_WE_sqrt) # (sqrt-transformed skewed variables)
# > Second analysis - full set of metrics (including number of bouts of different length)
# All days
PCA.wei_full_log  <- do.pca(z_data_wei_full_log)  # (log-transformed skewed variables)
PCA.wei_full_sqrt <- do.pca(z_data_wei_full_sqrt) # (sqrt-transformed skewed variables)
# WD & WE days
PCA.WDWE_full_log  <- do.pca(z_data_WD_WE_full_log)  # (log-transformed skewed variables)
PCA.WDWE_full_sqrt <- do.pca(z_data_WD_WE_full_sqrt) # (sqrt-transformed skewed variables)
# > Optimal number of clusters
# Elbow method
fviz_nbclust(z_data_wei_log, kmeans, method = "wss") +
geom_vline(xintercept = 5, linetype = 2) +
ggtitle("log-transformed skewed variables")
# --> 5 clusters
fviz_nbclust(z_data_wei_sqrt, kmeans, method = "wss") +
geom_vline(xintercept = 5, linetype = 2)+
ggtitle("sqrt-transformed skewed variables")
# All days
KM.wei_log  <- kmeans(z_data_wei_log,  centers = 5, nstart = 25) # (log-transformed skewed variables)
KM.wei_sqrt <- kmeans(z_data_wei_sqrt, centers = 5, nstart = 25) # (sqrt-transformed skewed variables)
# WD & WE days
KM.WDWE_log  <- kmeans(z_data_WD_WE_log,  centers = 5, nstart = 25) # (log-transformed skewed variables)
KM.WDWE_sqrt <- kmeans(z_data_WD_WE_sqrt, centers = 5, nstart = 25) # (sqrt-transformed skewed variables)
# Store clustering in new variables
data_wei_log$km.5 <- KM.wei_log$cluster
data_wei_log$km.5 <- as.factor(data_wei_log$km.5)
data_wei_sqrt$km.5 <- KM.wei_sqrt$cluster
data_wei_sqrt$km.5 <- as.factor(data_wei_sqrt$km.5)
data_WD_WE_log$km.5 <- KM.WDWE_log$cluster
data_WD_WE_log$km.5 <- as.factor(data_WD_WE_log$km.5)
data_WD_WE_sqrt$km.5 <- KM.WDWE_sqrt$cluster
data_WD_WE_sqrt$km.5 <- as.factor(data_WD_WE_sqrt$km.5)
# > Second analysis - full set of metrics (including number of bouts of different length)
set.seed(123)
# All days
KM.wei_full_log  <- kmeans(z_data_wei_full_log,  centers = 5, nstart = 25) # (log-transformed skewed variables)
KM.wei_full_sqrt <- kmeans(z_data_wei_full_sqrt, centers = 5, nstart = 25) # (sqrt-transformed skewed variables)
# WD & WE days
KM.WDWE_full_log  <- kmeans(z_data_WD_WE_full_log,  centers = 5, nstart = 25) # (log-transformed skewed variables)
KM.WDWE_full_sqrt <- kmeans(z_data_WD_WE_full_sqrt, centers = 5, nstart = 25) # (sqrt-transformed skewed variables)
# Store clustering in new variables
data_wei_full_log$km.5    <- KM.wei_full_log$cluster
data_wei_full_log$km.5    <- as.factor(data_wei_full_log$km.5)
data_wei_full_sqrt$km.5   <- KM.wei_full_sqrt$cluster
data_wei_full_sqrt$km.5   <- as.factor(data_wei_full_sqrt$km.5)
data_WD_WE_full_log$km.5  <- KM.WDWE_full_log$cluster
data_WD_WE_full_log$km.5  <- as.factor(data_WD_WE_full_log$km.5)
data_WD_WE_full_sqrt$km.5 <- KM.WDWE_full_sqrt$cluster
data_WD_WE_full_sqrt$km.5 <- as.factor(data_WD_WE_full_sqrt$km.5)
PCA.wei_log$wei$pca
PCA.wei_log$wei$pca
PCA.wei_log$pca
n <- 1
PC_n <- paste0("PC", i)
i <- 1
PC_n <- paste0("PC", i)
PC_n
median(PCA.wei_log$pca$x[,paste0(PC_n)])
PCA.wei_log$pca$x
head(PCA.wei_log$pca$x)
dim(PCA.wei_log$pca)
dim(PCA.wei_log$pca$x)
which(PCA.wei_log$pca$x[,paste0(PC_n)] <  med_PC_n)
med_PC_n <- median(PCA.wei_log$pca$x[,paste0(PC_n)])
which(PCA.wei_log$pca$x[,paste0(PC_n)] <  med_PC_n)
which(PCA.wei_log$pca$x[,paste0(PC_n)] >= med_PC_n)
head(z_data_wei_log)
head(data_wei_log)
dim(data_wei_log)
dim(PCA.wei_log$pca$x)
cbind(data_wei_log, PCA.wei_log$pca$x) %>% head(.)
data_belowmedian
indices_belowmedian
# > Identify people below or above median PC
indices_belowmedian = which(PCA.wei_log$pca$x[,paste0(PC_n)] <  med_PC_n)
indices_belowmedian
data_wei_log[,indices_belowmedian]
data_wei_log[indices_belowmedian,]
data_wei_log[, paste0("class", PC_n)] <- NA
head(data_wei_log)
data_wei_log[indices_belowmedian, paste0("class", PC_n)] <- 0
data_wei_log[indices_belowmedian, paste0("class", PC_n)] <- 1
table(data_wei_log$classPC1)
data_wei_log[indices_abovemedian, paste0("class", PC_n)] <- 1
indices_abovemedian = which(PCA.wei_log$pca$x[,paste0(PC_n)] >= med_PC_n)
data_wei_log[, paste0("class", PC_n)] <- NA
data_wei_log[indices_belowmedian, paste0("class", PC_n)] <- 0
data_wei_log[indices_abovemedian, paste0("class", PC_n)] <- 1
table(data_wei_log$classPC1)
# > Classify participants based on principal component value (below or above the median)
#   for the n first principal components of a PCA object
#   Arguments:
#    - pca.obj: an object of class "prcomp", containing PC estimations for participants (pca.obj$x)
#    - n: number of PC to take into account
#    - input.data: dataframe including non-standardized PA features for participants
#   Value:
#    - output.data: corresponds to input data, but with n new columns corresponding to
#      participant classification relative to median PC value, for each of the n first PC
class.n.PC <- function(pca.obj, n, input.data){
output.data <- input.data
for(i in 1:n)
{
# > Name of the PC
PC_n <- paste0("PC", i)
# > Median PC
med_PC_n <- median(pca.obj$x[,paste0(PC_n)])
# > Identify people below or above median PC
indices_belowmedian = which(pca.obj$x[,paste0(PC_n)] <  med_PC_n)
indices_abovemedian = which(pca.obj$x[,paste0(PC_n)] >= med_PC_n)
# > Check
expect_equal(min(pca.obj$x[indices_abovemedian,paste0(PC_n)]) >= med_PC_n, TRUE)
expect_equal(max(pca.obj$x[indices_belowmedian,paste0(PC_n)]) < med_PC_n, TRUE)
# > Assign a class corresponding to position relative to the PC median value
output.data[, paste0("class", PC_n)] <- NA
output.data[indices_belowmedian, paste0("class", PC_n)] <- 0
output.data[indices_abovemedian, paste0("class", PC_n)] <- 1
}
return(output.data)
}
t <- class.n.PC(PCA.wei_log$pca,   n = 10, input.data = data_wei_log)
head(t)
# > Classify participants based on principal component value (below or above the median)
#   for the n first principal components of a PCA object
#   Arguments:
#    - pca.obj: an object of class "prcomp", containing PC estimations for participants (pca.obj$x)
#    - n: number of PC to take into account
#    - input.data: dataframe including non-standardized PA features for participants
#   Value:
#    - output.data: corresponds to input data, but with n new columns corresponding to
#      participant classification relative to median PC value, for each of the n first PC
class.n.PC <- function(pca.obj, n, input.data){
output.data <- input.data
for(i in 1:n)
{
# > Name of the PC
PC_n <- paste0("PC", i)
# > Median PC
med_PC_n <- median(pca.obj$x[,paste0(PC_n)])
# > Identify people below or above median PC
indices_belowmedian = which(pca.obj$x[,paste0(PC_n)] <  med_PC_n)
indices_abovemedian = which(pca.obj$x[,paste0(PC_n)] >= med_PC_n)
# > Check
expect_equal(min(pca.obj$x[indices_abovemedian,paste0(PC_n)]) >= med_PC_n, TRUE)
expect_equal(max(pca.obj$x[indices_belowmedian,paste0(PC_n)]) < med_PC_n, TRUE)
# > Assign a class corresponding to position relative to the PC median value
output.data[, paste0("class", PC_n)] <- NA
output.data[indices_belowmedian, paste0("class", PC_n)] <- 0
output.data[indices_abovemedian, paste0("class", PC_n)] <- 1
output.data[, paste0("class", PC_n)] <- as.factor(output.data[, paste0("class", PC_n)])
}
return(output.data)
}
t <- class.n.PC(PCA.wei_log$pca,   n = 10, input.data = data_wei_log)
summary(t)
# > Classify participants based on principal component value (below or above the median)
new_data_wei_log         <- class.n.PC(PCA.wei_log$pca,        n = 10,     input.data = data_wei_log)
new_data_wei_log
summary(new_data_wei_log)
# > First analysis - selected set of metrics
# All days
PCA.wei_log  <- do.pca(z_data_wei_log)  # (log-transformed skewed variables)
PCA.wei_sqrt <- do.pca(z_data_wei_sqrt) # (sqrt-transformed skewed variables)
# WD & WE days
PCA.WDWE_log  <- do.pca(z_data_WD_WE_log)  # (log-transformed skewed variables)
PCA.WDWE_sqrt <- do.pca(z_data_WD_WE_sqrt) # (sqrt-transformed skewed variables)
# > Second analysis - full set of metrics (including number of bouts of different length)
# All days
PCA.wei_full_log  <- do.pca(z_data_wei_full_log)  # (log-transformed skewed variables)
PCA.wei_full_sqrt <- do.pca(z_data_wei_full_sqrt) # (sqrt-transformed skewed variables)
# WD & WE days
PCA.WDWE_full_log  <- do.pca(z_data_WD_WE_full_log)  # (log-transformed skewed variables)
PCA.WDWE_full_sqrt <- do.pca(z_data_WD_WE_full_sqrt) # (sqrt-transformed skewed variables)
# > Classify participants based on principal component value (below or above the median)
new_data_wei_log         <- class.n.PC(PCA.wei_log$pca,        n = 10,     input.data = data_wei_log)
new_data_wei_sqrt        <- class.n.PC(PCA.wei_sqrt$pca,       n = 10,     input.data = data_wei_sqrt)
new_data_WD_WE_log       <- class.n.PC(PCA.WDWE_log$pca,       n = 10,     input.data = data_WD_WE_log)
new_data_WD_WE_sqrt      <- class.n.PC(PCA.WDWE_sqrt$pca,      n = 10,     input.data = data_WD_WE_sqrt)
new_data_wei_full_log    <- class.n.PC(PCA.wei_full_log$pca,   n = 10,     input.data = data_wei_full_log)
new_data_wei_full_sqrt   <- class.n.PC(PCA.wei_full_sqrt$pca,  n = 10,     input.data = data_wei_full_sqrt)
new_data_WD_WE_full_log  <- class.n.PC(PCA.WDWE_full_log$pca,  n = 10,     input.data = data_WD_WE_full_log)
new_data_WD_WE_full_sqrt <- class.n.PC(PCA.WDWE_full_sqrt$pca, n = 10,     input.data = data_WD_WE_full_sqrt)
# -----------------------------
# Cluster analysis
# > Optimal number of clusters
# Elbow method
fviz_nbclust(z_data_wei_log, kmeans, method = "wss") +
geom_vline(xintercept = 5, linetype = 2) +
ggtitle("log-transformed skewed variables")
fviz_nbclust(z_data_wei_sqrt, kmeans, method = "wss") +
geom_vline(xintercept = 5, linetype = 2)+
ggtitle("sqrt-transformed skewed variables")
# --> 5 clusters
# > First analysis - selected set of metrics
set.seed(123)
# All days
KM.wei_log  <- kmeans(z_data_wei_log,  centers = 5, nstart = 25) # (log-transformed skewed variables)
KM.wei_sqrt <- kmeans(z_data_wei_sqrt, centers = 5, nstart = 25) # (sqrt-transformed skewed variables)
# WD & WE days
KM.WDWE_log  <- kmeans(z_data_WD_WE_log,  centers = 5, nstart = 25) # (log-transformed skewed variables)
KM.WDWE_sqrt <- kmeans(z_data_WD_WE_sqrt, centers = 5, nstart = 25) # (sqrt-transformed skewed variables)
# > Second analysis - full set of metrics (including number of bouts of different length)
set.seed(123)
# All days
KM.wei_full_log  <- kmeans(z_data_wei_full_log,  centers = 5, nstart = 25) # (log-transformed skewed variables)
KM.wei_full_sqrt <- kmeans(z_data_wei_full_sqrt, centers = 5, nstart = 25) # (sqrt-transformed skewed variables)
# WD & WE days
KM.WDWE_full_log  <- kmeans(z_data_WD_WE_full_log,  centers = 5, nstart = 25) # (log-transformed skewed variables)
KM.WDWE_full_sqrt <- kmeans(z_data_WD_WE_full_sqrt, centers = 5, nstart = 25) # (sqrt-transformed skewed variables)
# > Store clustering in new variables
data_wei_log$km.5 <- KM.wei_log$cluster
data_wei_log$km.5 <- as.factor(data_wei_log$km.5)
data_wei_sqrt$km.5 <- KM.wei_sqrt$cluster
data_wei_sqrt$km.5 <- as.factor(data_wei_sqrt$km.5)
data_WD_WE_log$km.5 <- KM.WDWE_log$cluster
data_WD_WE_log$km.5 <- as.factor(data_WD_WE_log$km.5)
data_WD_WE_sqrt$km.5 <- KM.WDWE_sqrt$cluster
data_WD_WE_sqrt$km.5 <- as.factor(data_WD_WE_sqrt$km.5)
new_data_wei_full_log$km.5    <- KM.wei_full_log$cluster
new_data_wei_full_log$km.5    <- as.factor(data_wei_full_log$km.5)
new_data_wei_full_sqrt$km.5   <- KM.wei_full_sqrt$cluster
new_data_wei_full_sqrt$km.5   <- as.factor(data_wei_full_sqrt$km.5)
new_data_WD_WE_full_log$km.5  <- KM.WDWE_full_log$cluster
new_data_WD_WE_full_log$km.5  <- as.factor(data_WD_WE_full_log$km.5)
new_data_WD_WE_full_sqrt$km.5 <- KM.WDWE_full_sqrt$cluster
new_data_WD_WE_full_sqrt$km.5 <- as.factor(data_WD_WE_full_sqrt$km.5)
